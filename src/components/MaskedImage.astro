---
interface Props {
	placeholder?: string;
	revealStages?: number;
}

const { placeholder = "[IMAGE]", revealStages = 1 } = Astro.props;
---

<div class="masked-image-container">
	<div class="placeholder-text">{placeholder}</div>
	<div class="image-reveal-container">
		<div class="image-reveal" data-stages={revealStages}>
			<!-- Image would be revealed here -->
			<div class="image-stage stage-1 hidden">
				<div class="ascii-art">
					<pre>
   _____                      _   _             
  / ____|                    | | (_)            
 | |     _ __ _   _ _ __ ___ | |_ _  ___  _ __  
 | |    | '__| | | | '_ ` _ \| __| |/ _ \| '_ \ 
 | |____| |  | |_| | | | | | | |_| | (_) | | | |
  \_____|_|   \__, |_| |_| |_|\__|_|\___/|_| |_|
               __/ |                            
              |___/                             
					</pre>
				</div>
			</div>
			<div class="image-stage stage-2 hidden">
				<div class="ascii-art">
					<pre>
  _____                             _   _             
 / ____|                           | | (_)            
| |     ___  _ __ ___  _ __  _   _ | |_ _  ___  _ __  
| |    / _ \| '_ ` _ \| '_ \| | | || __| |/ _ \| '_ \ 
| |___| (_) | | | | | | |_) | |_| || |_| | (_) | | | |
 \_____\___/|_| |_| |_| .__/ \__,_| \__|_|\___/|_| |_|
                      | |                             
                      |_|                             
					</pre>
				</div>
			</div>
			<div class="image-stage stage-3 hidden">
				<div class="ascii-art">
					<pre>
 _____  _     _     _     _             
|  __ \| |   (_)   | |   (_)            
| |__) | |__  _ ___| |__  _ _ __   __ _ 
|  ___/| '_ \| / __| '_ \| | '_ \ / _` |
| |    | | | | \__ \ | | | | | | | (_| |
|_|    |_| |_|_|___/_| |_|_|_| |_|\__, |
                                   __/ |
                                  |___/ 
					</pre>
				</div>
			</div>
		</div>
	</div>
</div>

<style>
	.masked-image-container {
		position: relative;
		width: 100%;
		margin: 20px 0;
		min-height: 150px;
		border: 1px solid var(--terminal-dim);
		border-radius: 4px;
		background-color: rgba(0, 0, 0, 0.3);
		overflow: hidden;
	}
	
	.placeholder-text {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
		color: var(--terminal-dim);
		font-family: 'Courier New', monospace;
		font-size: 1.2em;
		text-align: center;
		padding: 20px;
		z-index: 1;
	}
	
	.image-reveal-container {
		position: relative;
		width: 100%;
		height: 100%;
		z-index: 2;
	}
	
	.image-reveal {
		width: 100%;
		height: 100%;
	}
	
	.image-stage {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
		opacity: 0;
		transition: opacity 1s ease-in-out;
	}
	
	.image-stage.visible {
		opacity: 1;
	}
	
	.hidden {
		display: none;
	}
	
	.ascii-art {
		color: var(--terminal-accent);
		font-size: 0.7em;
		line-height: 1.2;
		text-align: center;
		padding: 20px;
		width: 100%;
		overflow-x: auto;
	}
	
	.ascii-art pre {
		margin: 0;
		display: inline-block;
		text-align: left;
	}
	
	/* Responsive adjustments */
	@media (max-width: 768px) {
		.ascii-art {
			font-size: 0.5em;
		}
	}
</style>

<script>
	document.addEventListener('astro:page-load', () => {
		const imageReveal = document.querySelector('.image-reveal');
		if (!imageReveal) return;
		
		const stages = parseInt(imageReveal.getAttribute('data-stages') || '1', 10);
		const placeholder = document.querySelector('.placeholder-text');
		
		// Listen for puzzle solved events
		document.addEventListener('revealImage', (event) => {
			const puzzleId = event.detail.puzzleId;
			let stageNum = 0;
			
			// Determine which stage to reveal based on puzzle ID
			if (puzzleId === 'cipher-puzzle') {
				stageNum = 1;
			} else if (puzzleId === 'hash-puzzle') {
				stageNum = 2;
			} else if (puzzleId === 'key-puzzle') {
				stageNum = 3;
			}
			
			if (stageNum > 0 && stageNum <= stages) {
				// Hide placeholder if first stage
				if (stageNum === 1 && placeholder) {
					placeholder.style.opacity = '0';
					setTimeout(() => {
						placeholder.style.display = 'none';
					}, 1000);
				}
				
				// Show the stage
				const stage = document.querySelector(`.stage-${stageNum}`);
				if (stage) {
					stage.classList.remove('hidden');
					setTimeout(() => {
						stage.classList.add('visible');
					}, 100);
				}
			}
		});
	});
</script>
