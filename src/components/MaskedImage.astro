---
interface Props {
	placeholder: string;
	revealStages: number;
}

const { placeholder, revealStages = 3 } = Astro.props;
---

<div class="masked-image-container">
	<div class="masked-image">
		<div class="image-placeholder">{placeholder}</div>
		<div class="image-layers">
			<div class="image-layer layer-1"></div>
			<div class="image-layer layer-2"></div>
			<div class="image-layer layer-3"></div>
		</div>
	</div>
	<div class="image-status">
		<div class="status-bar">
			<div class="status-progress" id="image-progress"></div>
		</div>
		<div class="status-text">Decryption Progress: <span id="progress-text">0%</span></div>
	</div>
</div>

<style>
	.masked-image-container {
		margin: 20px 0;
		width: 100%;
	}
	
	.masked-image {
		position: relative;
		width: 100%;
		height: 200px;
		background-color: rgba(0, 0, 0, 0.3);
		border: 1px solid var(--terminal-dim);
		border-radius: 4px;
		overflow: hidden;
	}
	
	.image-placeholder {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
		color: var(--terminal-dim);
		font-style: italic;
		z-index: 1;
	}
	
	.image-layers {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: 2;
	}
	
	.image-layer {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-size: cover;
		background-position: center;
		opacity: 0;
		transition: opacity 1s ease-in-out;
	}
	
	.layer-1 {
		background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='200' viewBox='0 0 400 200'%3E%3Crect width='400' height='200' fill='%23282a36'/%3E%3Ctext x='50%25' y='50%25' dominant-baseline='middle' text-anchor='middle' font-family='monospace' font-size='24' fill='%238be9fd'%3ELAYER 1 DECRYPTED%3C/text%3E%3C/svg%3E");
		filter: blur(5px);
	}
	
	.layer-2 {
		background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='200' viewBox='0 0 400 200'%3E%3Crect width='400' height='200' fill='%23282a36'/%3E%3Ctext x='50%25' y='50%25' dominant-baseline='middle' text-anchor='middle' font-family='monospace' font-size='24' fill='%238be9fd'%3ELAYER 2 DECRYPTED%3C/text%3E%3C/svg%3E");
		filter: blur(3px);
	}
	
	.layer-3 {
		background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='200' viewBox='0 0 400 200'%3E%3Crect width='400' height='200' fill='%23282a36'/%3E%3Ctext x='50%25' y='30%25' dominant-baseline='middle' text-anchor='middle' font-family='monospace' font-size='24' fill='%23ff5555'%3EWARNING:%3C/text%3E%3Ctext x='50%25' y='50%25' dominant-baseline='middle' text-anchor='middle' font-family='monospace' font-size='20' fill='%23f8f8f2'%3EPHISHING ATTACK DETECTED%3C/text%3E%3Ctext x='50%25' y='70%25' dominant-baseline='middle' text-anchor='middle' font-family='monospace' font-size='16' fill='%23f1fa8c'%3EFake login page identified%3C/text%3E%3C/svg%3E");
	}
	
	.image-status {
		margin-top: 10px;
	}
	
	.status-bar {
		width: 100%;
		height: 10px;
		background-color: rgba(0, 0, 0, 0.3);
		border-radius: 5px;
		overflow: hidden;
	}
	
	.status-progress {
		height: 100%;
		width: 0%;
		background-color: var(--terminal-accent);
		transition: width 1s ease-in-out;
	}
	
	.status-text {
		margin-top: 5px;
		font-size: 0.8em;
		color: var(--terminal-dim);
		text-align: right;
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const progressBar = document.getElementById('image-progress');
		const progressText = document.getElementById('progress-text');
		const layers = document.querySelectorAll('.image-layer');
		const totalLayers = layers.length;
		let revealedLayers = 0;
		
		// Listen for reveal events
		document.addEventListener('revealImage', (event) => {
			if (revealedLayers < totalLayers) {
				revealedLayers++;
				
				// Update progress bar
				const progress = (revealedLayers / totalLayers) * 100;
				if (progressBar) progressBar.style.width = `${progress}%`;
				if (progressText) progressText.textContent = `${Math.round(progress)}%`;
				
				// Reveal layer with glitch effect
				const layer = layers[revealedLayers - 1];
				if (layer) {
					// Add glitch effect
					layer.style.clipPath = 'inset(0 0 0 0)';
					layer.style.animation = 'none';
					
					// Force reflow
					void layer.offsetWidth;
					
					// Add glitch animation
					layer.style.animation = 'layerGlitch 0.5s ease-out';
					
					// Show layer
					setTimeout(() => {
						layer.style.opacity = '1';
					}, 100);
				}
				
				// If all layers revealed, hide placeholder
				if (revealedLayers === totalLayers) {
					const placeholder = document.querySelector('.image-placeholder');
					if (placeholder) {
						placeholder.style.opacity = '0';
					}
				}
			}
		});
	});
</script>

<style is:global>
	@keyframes layerGlitch {
		0% {
			clip-path: inset(0 0 100% 0);
			transform: translateX(-5px);
		}
		10% {
			clip-path: inset(10% 0 80% 0);
			transform: translateX(5px);
		}
		20% {
			clip-path: inset(30% 0 50% 0);
			transform: translateX(-5px);
		}
		30% {
			clip-path: inset(50% 0 30% 0);
			transform: translateX(5px);
		}
		40% {
			clip-path: inset(70% 0 10% 0);
			transform: translateX(-5px);
		}
		50% {
			clip-path: inset(10% 0 90% 0);
			transform: translateX(5px);
		}
		60% {
			clip-path: inset(40% 0 30% 0);
			transform: translateX(-5px);
		}
		70% {
			clip-path: inset(30% 0 60% 0);
			transform: translateX(5px);
		}
		80% {
			clip-path: inset(20% 0 70% 0);
			transform: translateX(-5px);
		}
		90% {
			clip-path: inset(10% 0 50% 0);
			transform: translateX(5px);
		}
		100% {
			clip-path: inset(0 0 0 0);
			transform: translateX(0);
		}
	}
</style>
