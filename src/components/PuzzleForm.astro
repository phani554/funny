---
interface Props {
	id: string;
	question: string;
	hint?: string;
	answer: string;
	onSuccess?: string;
}

const { id, question, hint, answer, onSuccess } = Astro.props;
---

<div class="puzzle-form" data-id={id} data-answer={answer} data-success={onSuccess}>
	<div class="puzzle-question">
		<p>{question}</p>
	</div>
	
	{hint && (
		<div class="hint-container">
			<button class="hint-toggle">Need a hint?</button>
			<div class="hint-content hidden">
				<p>{hint}</p>
			</div>
		</div>
	)}
	
	<div class="answer-form">
		<input type="text" class="answer-input" placeholder="Enter your answer..." autocomplete="off" />
		<button class="submit-btn">Submit</button>
	</div>
	
	<div class="feedback-message hidden"></div>
</div>

<style>
	.puzzle-form {
		margin: 20px 0;
		padding: 15px;
		border: 1px solid var(--terminal-dim);
		border-radius: 4px;
		background-color: rgba(0, 0, 0, 0.2);
	}
	
	.puzzle-question {
		margin-bottom: 15px;
	}
	
	.hint-container {
		margin-bottom: 15px;
	}
	
	.hint-toggle {
		background: none;
		border: none;
		color: var(--terminal-warning);
		cursor: pointer;
		font-family: inherit;
		font-size: 0.9em;
		padding: 0;
		text-decoration: underline;
		transition: color 0.3s;
	}
	
	.hint-toggle:hover {
		color: var(--terminal-accent);
	}
	
	.hint-content {
		margin-top: 10px;
		padding: 10px;
		background-color: rgba(241, 250, 140, 0.1);
		border-left: 3px solid var(--terminal-warning);
		font-size: 0.9em;
	}
	
	.answer-form {
		display: flex;
		gap: 10px;
	}
	
	.answer-input {
		flex: 1;
		background-color: rgba(0, 0, 0, 0.3);
		border: 1px solid var(--terminal-dim);
		border-radius: 4px;
		color: var(--terminal-text);
		font-family: 'Courier New', monospace;
		padding: 8px 12px;
		transition: border-color 0.3s;
	}
	
	.answer-input:focus {
		outline: none;
		border-color: var(--terminal-accent);
	}
	
	.submit-btn {
		background-color: var(--terminal-dim);
		border: none;
		border-radius: 4px;
		color: var(--terminal-text);
		cursor: pointer;
		font-family: 'Courier New', monospace;
		padding: 8px 16px;
		transition: background-color 0.3s;
	}
	
	.submit-btn:hover {
		background-color: var(--terminal-accent);
	}
	
	.feedback-message {
		margin-top: 15px;
		padding: 10px;
		border-radius: 4px;
		font-size: 0.9em;
	}
	
	.feedback-message.success {
		background-color: rgba(80, 250, 123, 0.1);
		border: 1px solid var(--terminal-success);
		color: var(--terminal-success);
	}
	
	.feedback-message.error {
		background-color: rgba(255, 85, 85, 0.1);
		border: 1px solid var(--terminal-error);
		color: var(--terminal-error);
	}
	
	.hidden {
		display: none;
	}
	
	/* Glitch effect for success */
	.puzzle-form.solved {
		animation: solvedGlitch 1s ease-out;
		border-color: var(--terminal-success);
	}
	
	@keyframes solvedGlitch {
		0% {
			transform: translateX(0);
		}
		20% {
			transform: translateX(-5px);
		}
		40% {
			transform: translateX(5px);
		}
		60% {
			transform: translateX(-3px);
		}
		80% {
			transform: translateX(3px);
		}
		100% {
			transform: translateX(0);
		}
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const puzzleForms = document.querySelectorAll('.puzzle-form');
		
		puzzleForms.forEach(form => {
			const id = form.getAttribute('data-id');
			const correctAnswer = form.getAttribute('data-answer')?.toLowerCase();
			const successAction = form.getAttribute('data-success');
			
			const hintToggle = form.querySelector('.hint-toggle');
			const hintContent = form.querySelector('.hint-content');
			const answerInput = form.querySelector('.answer-input');
			const submitBtn = form.querySelector('.submit-btn');
			const feedbackMessage = form.querySelector('.feedback-message');
			
			// Check if puzzle was already solved
			const isSolved = localStorage.getItem(`puzzle_${id}`) === 'solved';
			if (isSolved) {
				form.classList.add('solved');
				if (answerInput) answerInput.disabled = true;
				if (submitBtn) submitBtn.disabled = true;
				if (feedbackMessage) {
					feedbackMessage.textContent = 'You already solved this puzzle!';
					feedbackMessage.classList.remove('hidden');
					feedbackMessage.classList.add('success');
				}
			}
			
			// Toggle hint visibility
			if (hintToggle && hintContent) {
				hintToggle.addEventListener('click', () => {
					hintContent.classList.toggle('hidden');
					hintToggle.textContent = hintContent.classList.contains('hidden') ? 
						'Need a hint?' : 'Hide hint';
				});
			}
			
			// Handle form submission
			if (submitBtn && answerInput && feedbackMessage) {
				submitBtn.addEventListener('click', () => {
					const userAnswer = answerInput.value.trim().toLowerCase();
					
					if (userAnswer === '') {
						feedbackMessage.textContent = 'Please enter an answer.';
						feedbackMessage.classList.remove('hidden', 'success');
						feedbackMessage.classList.add('error');
						return;
					}
					
					if (userAnswer === correctAnswer) {
						// Mark as solved
						localStorage.setItem(`puzzle_${id}`, 'solved');
						
						// Update UI
						form.classList.add('solved');
						answerInput.disabled = true;
						submitBtn.disabled = true;
						feedbackMessage.textContent = 'Correct! Well done.';
						feedbackMessage.classList.remove('hidden', 'error');
						feedbackMessage.classList.add('success');
						
						// Dispatch event for puzzle solved
						const solvedEvent = new CustomEvent('puzzleSolved', {
							detail: { puzzleId: id }
						});
						document.dispatchEvent(solvedEvent);
						
						// Execute success action if provided
						if (successAction && typeof window[successAction] === 'function') {
							window[successAction](id);
						}
					} else {
						// Show error
						feedbackMessage.textContent = 'Incorrect. Try again.';
						feedbackMessage.classList.remove('hidden', 'success');
						feedbackMessage.classList.add('error');
						
						// Add shake effect
						answerInput.classList.add('shake');
						setTimeout(() => {
							answerInput.classList.remove('shake');
						}, 500);
					}
				});
				
				// Allow Enter key to submit
				answerInput.addEventListener('keypress', (e) => {
					if (e.key === 'Enter') {
						submitBtn.click();
					}
				});
			}
		});
		
		// Function to navigate to next stage
		window.unlockStage2 = () => {
			setTimeout(() => {
				window.location.href = '/stage2';
			}, 2000);
		};
		
		window.unlockStage3 = () => {
			setTimeout(() => {
				window.location.href = '/stage3';
			}, 2000);
		};
	});
</script>

<style is:global>
	.shake {
		animation: shake 0.5s ease-in-out;
	}
	
	@keyframes shake {
		0%, 100% {
			transform: translateX(0);
		}
		20%, 60% {
			transform: translateX(-5px);
		}
		40%, 80% {
			transform: translateX(5px);
		}
	}
</style>
