---
export interface Props {
  id: string;
  question: string;
  hint: string;
  answer: string;
  onSuccess: string;
}

const { id, question, hint, answer, onSuccess } = Astro.props;
const baseUrl = import.meta.env.BASE_URL || '/cyber-scavenger-hunt';
---

<div class="puzzle-form" id={id}>
  <div class="puzzle-question">
    <p>{question}</p>
  </div>
  
  <div class="puzzle-input-container">
    <input type="text" class="puzzle-input" placeholder="Enter your answer..." />
    <button class="puzzle-submit">SUBMIT</button>
  </div>
  
  <div class="puzzle-hint-container">
    <button class="hint-toggle">SHOW HINT</button>
    <div class="puzzle-hint hidden">
      <p>{hint}</p>
    </div>
  </div>
  
  <div class="puzzle-feedback hidden"></div>
</div>

<style>
  .puzzle-form {
    margin: 30px 0;
    padding: 20px;
    border: 1px solid var(--terminal-dim);
    border-radius: 4px;
    background-color: rgba(30, 31, 41, 0.5);
  }
  
  .puzzle-question {
    margin-bottom: 20px;
  }
  
  .puzzle-input-container {
    display: flex;
    margin-bottom: 15px;
  }
  
  .puzzle-input {
    flex: 1;
    background-color: rgba(0, 0, 0, 0.3);
    border: 1px solid var(--terminal-dim);
    color: var(--terminal-text);
    padding: 10px;
    font-family: 'Courier New', monospace;
  }
  
  .puzzle-input:focus {
    outline: none;
    border-color: var(--terminal-accent);
  }
  
  .puzzle-submit {
    background-color: var(--terminal-dim);
    color: var(--terminal-text);
    border: none;
    padding: 10px 15px;
    margin-left: 10px;
    cursor: pointer;
    font-family: 'Courier New', monospace;
    transition: all 0.3s ease;
  }
  
  .puzzle-submit:hover {
    background-color: var(--terminal-accent);
    color: #000;
  }
  
  .puzzle-hint-container {
    margin-bottom: 15px;
  }
  
  .hint-toggle {
    background-color: transparent;
    color: var(--terminal-warning);
    border: 1px solid var(--terminal-warning);
    padding: 5px 10px;
    font-size: 0.8em;
    cursor: pointer;
    font-family: 'Courier New', monospace;
    transition: all 0.3s ease;
  }
  
  .hint-toggle:hover {
    background-color: rgba(241, 250, 140, 0.1);
  }
  
  .puzzle-hint {
    margin-top: 10px;
    padding: 10px;
    background-color: rgba(241, 250, 140, 0.05);
    border-left: 3px solid var(--terminal-warning);
  }
  
  .puzzle-feedback {
    padding: 10px;
    margin-top: 15px;
    border-radius: 4px;
  }
  
  .puzzle-feedback.success {
    background-color: rgba(80, 250, 123, 0.1);
    border: 1px solid var(--terminal-success);
    color: var(--terminal-success);
  }
  
  .puzzle-feedback.error {
    background-color: rgba(255, 85, 85, 0.1);
    border: 1px solid var(--terminal-error);
    color: var(--terminal-error);
  }
  
  .hidden {
    display: none;
  }
  
  /* Glitch effect for success */
  @keyframes successGlitch {
    0% {
      text-shadow: 0.05em 0 0 rgba(255, 0, 0, 0.75),
                  -0.05em -0.025em 0 rgba(0, 255, 0, 0.75),
                  -0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
    }
    14% {
      text-shadow: 0.05em 0 0 rgba(255, 0, 0, 0.75),
                  -0.05em -0.025em 0 rgba(0, 255, 0, 0.75),
                  -0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
    }
    15% {
      text-shadow: -0.05em -0.025em 0 rgba(255, 0, 0, 0.75),
                  0.025em 0.025em 0 rgba(0, 255, 0, 0.75),
                  -0.05em -0.05em 0 rgba(0, 0, 255, 0.75);
    }
    49% {
      text-shadow: -0.05em -0.025em 0 rgba(255, 0, 0, 0.75),
                  0.025em 0.025em 0 rgba(0, 255, 0, 0.75),
                  -0.05em -0.05em 0 rgba(0, 0, 255, 0.75);
    }
    50% {
      text-shadow: 0.025em 0.05em 0 rgba(255, 0, 0, 0.75),
                  0.05em 0 0 rgba(0, 255, 0, 0.75),
                  0 -0.05em 0 rgba(0, 0, 255, 0.75);
    }
    99% {
      text-shadow: 0.025em 0.05em 0 rgba(255, 0, 0, 0.75),
                  0.05em 0 0 rgba(0, 255, 0, 0.75),
                  0 -0.05em 0 rgba(0, 0, 255, 0.75);
    }
    100% {
      text-shadow: -0.025em 0 0 rgba(255, 0, 0, 0.75),
                  -0.025em -0.025em 0 rgba(0, 255, 0, 0.75),
                  -0.025em -0.05em 0 rgba(0, 0, 255, 0.75);
    }
  }
</style>

<script define:vars={{ id, answer, onSuccess, baseUrl }}>
  document.addEventListener('DOMContentLoaded', () => {
    const puzzleForm = document.getElementById(id);
    if (!puzzleForm) return;
    
    const input = puzzleForm.querySelector('.puzzle-input');
    const submitBtn = puzzleForm.querySelector('.puzzle-submit');
    const hintToggle = puzzleForm.querySelector('.hint-toggle');
    const hint = puzzleForm.querySelector('.puzzle-hint');
    const feedback = puzzleForm.querySelector('.puzzle-feedback');
    
    // Toggle hint visibility
    if (hintToggle && hint) {
      hintToggle.addEventListener('click', () => {
        hint.classList.toggle('hidden');
        hintToggle.textContent = hint.classList.contains('hidden') ? 'SHOW HINT' : 'HIDE HINT';
      });
    }
    
    // Handle form submission
    if (submitBtn && input && feedback) {
      submitBtn.addEventListener('click', () => {
        const userAnswer = input.value.trim().toLowerCase();
        
        if (userAnswer === answer.toLowerCase()) {
          // Success
          feedback.textContent = 'CORRECT! Access granted. Proceeding to next stage...';
          feedback.classList.add('success');
          feedback.classList.remove('error', 'hidden');
          
          // Apply success effects
          puzzleForm.style.animation = 'successGlitch 0.3s ease forwards';
          
          // Trigger success callback
          if (onSuccess === 'unlockStage2') {
            setTimeout(() => {
              window.location.href = `${baseUrl}/stage2/`;
            }, 2000);
          } else if (onSuccess === 'unlockStage3') {
            setTimeout(() => {
              window.location.href = `${baseUrl}/stage3/`;
            }, 2000);
          }
        } else {
          // Error
          feedback.textContent = 'INCORRECT. Access denied. Try again.';
          feedback.classList.add('error');
          feedback.classList.remove('success', 'hidden');
          
          // Shake effect for error
          input.style.animation = 'shake 0.5s ease';
          setTimeout(() => {
            input.style.animation = '';
          }, 500);
        }
      });
      
      // Allow Enter key to submit
      input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          submitBtn.click();
        }
      });
    }
  });
  
  // Add shake animation
  if (!document.querySelector('#shake-keyframes')) {
    const style = document.createElement('style');
    style.id = 'shake-keyframes';
    style.textContent = `
      @keyframes shake {
        0%, 100% { transform: translateX(0); }
        20%, 60% { transform: translateX(-5px); }
        40%, 80% { transform: translateX(5px); }
      }
    `;
    document.head.appendChild(style);
  }
</script>
